const axios = require('axios');
const fs = require('fs');
const path = require('path');

// ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ - ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶∞‡¶æ‡¶ñ‡ßá
const searchCache = new Map();

module.exports = {
  config: {
    name: "pic",
    aliases: ["celebrity", "celebpics", "images", "pinterest"],
    version: "2.0",
    author: "YourName",
    countDown: 5, // 5 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡¶°‡¶æ‡¶â‡¶®
    role: 0,
    shortDescription: "‡¶∏‡ßá‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡¶ø‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö Pinterest ‡¶•‡ßá‡¶ï‡ßá",
    longDescription: "Pinterest API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡¶ø‡¶ü‡¶ø‡¶¶‡ßá‡¶∞ ‡ßß‡ß¶‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¶‡ßá‡¶Ø‡¶º, ‡ß´ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶∏‡¶π",
    category: "image",
    guide: {
      en: "{pn} <‡¶∏‡ßá‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡¶ø‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ>"
    }
  },

  onStart: async function ({ message, args, event, api }) {
    try {
      const name = args.join(" ");
      if (!name) {
        return message.reply("‚ö†Ô∏è ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡ßá‡¶≤‡¶ø‡¶¨‡ßç‡¶∞‡¶ø‡¶ü‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§");
      }

      // ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
      const now = Date.now();
      const userID = event.senderID;
      const cacheKey = `${userID}_${name}`;
      
      if (searchCache.has(cacheKey)) {
        const lastSearch = searchCache.get(cacheKey);
        const timeDiff = now - lastSearch.time;
        
        if (timeDiff < 5000) { // 5 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ï‡ßÅ‡¶≤‡¶°‡¶æ‡¶â‡¶®
          const remainingTime = Math.ceil((5000 - timeDiff) / 1000);
          return message.reply(`‚è∞ ${remainingTime} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§`);
        }
      }

      // ‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
      const dirPath = path.join(__dirname, "cache", "pics");
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
      }

      message.reply(`üîç "${name}" ‡¶è‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø...`);

      // Pinterest API ‡¶•‡ßá‡¶ï‡ßá ‡¶á‡¶Æ‡ßá‡¶ú URLs ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
      const apiUrl = `https://kaiz-apis.gleeze.com/api/pinterest?search=${encodeURIComponent(name)}&apikey=a96577fa-b30a-428a-af48-b2e816c16a4c`;
      
      const response = await axios.get(apiUrl);
      const imageUrls = response.data.data;
      
      if (!imageUrls || imageUrls.length === 0) {
        return message.reply(`‚ùå "${name}" ‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§`);
      }

      // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
      let currentIndex = 0;
      if (searchCache.has(cacheKey)) {
        currentIndex = (searchCache.get(cacheKey).index + 1) % imageUrls.length;
      }

      // ‡ßß‡ß¶‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶á‡¶®‡ßç‡¶°‡ßá‡¶ï‡ßç‡¶∏ ‡¶•‡ßá‡¶ï‡ßá)
      const downloadedImages = [];
      for (let i = 0; i < Math.min(10, imageUrls.length); i++) {
        try {
          const imgIndex = (currentIndex + i) % imageUrls.length;
          const imagePath = path.join(dirPath, `image_${i}.jpg`);
          
          await this.downloadImage(imageUrls[imgIndex], imagePath);
          downloadedImages.push(fs.createReadStream(imagePath));
        } catch (error) {
          console.error(`Error downloading image ${i}:`, error);
        }
      }

      if (downloadedImages.length === 0) {
        return message.reply("‚ùå ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§");
      }

      // ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
      searchCache.set(cacheKey, {
        time: now,
        index: (currentIndex + 10) % imageUrls.length,
        urls: imageUrls
      });

      // ‡ß´ ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü ‡¶™‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®
      setTimeout(() => {
        if (searchCache.has(cacheKey)) {
          searchCache.delete(cacheKey);
        }
      }, 5 * 60 * 1000); // 5 ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü

      // ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®
      await message.reply({
        body: `üì∏ ${name} - ${downloadedImages.length}‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá\n\n‡¶™‡¶∞‡ßá‡¶∞ ‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶á ‡¶®‡¶æ‡¶Æ‡ßá ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶¨‡ßá‡¶®!`,
        attachment: downloadedImages
      });

    } catch (error) {
      console.error("Error in pic command:", error);
      message.reply("‚ùå ‡¶õ‡¶¨‡¶ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶™‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§");
    }
  },

  downloadImage: async function (url, filePath) {
    try {
      const response = await axios({
        method: 'GET',
        url: url,
        responseType: 'stream',
        timeout: 10000 // 10 ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶ü‡¶æ‡¶á‡¶Æ‡¶Ü‡¶â‡¶ü
      });

      const writer = fs.createWriteStream(filePath);
      response.data.pipe(writer);

      return new Promise((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
      });
    } catch (error) {
      console.error("Download error:", error);
      throw error;
    }
  }
};
